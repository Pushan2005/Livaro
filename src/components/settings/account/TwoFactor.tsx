"use client";

import { useState, useEffect, useTransition } from "react";
import { useForm, Resolver, FieldErrors } from "react-hook-form";
import * as AlertDialog from "@radix-ui/react-alert-dialog";
import Image from "next/image";
import { Input } from "../../ui/input";
import { EditDialogCancel, EditDialogSubmit } from "./EditDialog";
import { enrollTwoFactor, verifyTwoFactor, unenrollTwoFactor } from "@/src/db/actions";
import { TOTPInfo } from "@/lib/types";
import { useAccountSetting } from "@/src/contexts/AccountSettingContext";
import { createClient } from "@/utils/supabase/client";
import Spinner from "../../ui/Spinner";
import { Skeleton } from "../../ui/LoadingSkeleton";

export default function TwoFactorAction() {
  const { mfaEnabled } = useAccountSetting();

  if (mfaEnabled === null) {
    return (
      <Skeleton className="w-[70px] h-[20px] rounded-md" />
    );
  }

  if (mfaEnabled) {
    return <DisableTwoFactorAction />;
  }

  return <EnableTwoFactorAction />;
}

// ----------------------------------------
// |   Enable Two-Factor Authentication   |
// ----------------------------------------

interface FormValues {
  code: string;
}

const resolver: Resolver<FormValues> = async (values) => {
  const errors: FieldErrors<FormValues> = {};

  if (!values.code) {
    errors.code = {
      type: "required",
      message: "Authentication code is required"
    };
  } else if (!values.code.match(/^\d{6}$/)) {
    errors.code = {
      type: "pattern",
      message: "Authentication code must be a 6-digit number"
    };
  }

  const hasErrors = Object.keys(errors).length > 0;

  return {
    values: hasErrors ? {} : values,
    errors: hasErrors ? errors : {}
  };
};

function EnableTwoFactorAction() {
  const {
    formState: { errors },
    register,
    handleSubmit
  } = useForm<FormValues>({ resolver });
  const [isOpen, setIsOpen] = useState(false);
  const [totp, setTotp] = useState<TOTPInfo | null>(null);
  const [isEnrolling, startEnrolling] = useTransition();
  const [isVerifying, startVerifying] = useTransition();
  const [serverError, setServerError] = useState<string | null>(null);
  const { setMfaEnabled } = useAccountSetting();

  const onSubmit = (data: FormValues) => {
    startVerifying(async () => {
      const res = await verifyTwoFactor(data.code);
      if (res.success) {
        setIsOpen(false);
        setTotp(null);
        setServerError(null);
        setMfaEnabled(true);
      } else {
        setServerError(
          res.error || "Failed to verify two-factor authentication code"
        );
      }
    });
  };

  // enroll in two-factor authentication when dialog opens
  useEffect(() => {
    if (!isOpen) return;

    startEnrolling(async () => {
      const res = await enrollTwoFactor();
      if (res.success) {
        setTotp(res.totp || null);
        setServerError(null);
      } else {
        setServerError(
          res.error || "Failed to enroll in two-factor authentication"
        );
      }
    });
  }, [isOpen]);

  return (
    <AlertDialog.Root open={isOpen} onOpenChange={setIsOpen}>
      <AlertDialog.Trigger asChild>
        <button className="text-blue-700 hover:bg-blue-50 rounded px-2">
          Enable
        </button>
      </AlertDialog.Trigger>
      <AlertDialog.Portal>
        <AlertDialog.Overlay className="bg-opacity-50 bg-gray-950 fixed inset-0 z-50" />
        <AlertDialog.Content className="fixed z-50 overflow-y-auto inset-0 grid place-items-center">
          <form
            className="my-16 w-[90vw] max-w-md bg-white p-6 rounded-lg shadow-lg"
            onSubmit={handleSubmit(onSubmit)}
          >
            <AlertDialog.Title className="text-lg font-semibold text-center mb-4">
              Enable Two-Factor Authentication
            </AlertDialog.Title>
            <AlertDialog.Description asChild>
              <div>
                <p className="text-gray-700 mb-4">
                  Two-factor authentication adds an extra layer of security to
                  your account. Please follow the instructions below to set it
                  up.
                </p>
                <ol className="list-decimal list-inside space-y-2">
                  <li>
                    Download an authenticator app (e.g., Google Authenticator).
                  </li>
                  <li>
                    Scan the QR code displayed below with your authenticator
                    app.
                  </li>
                  <li>
                    Enter the verification code generated by the app to complete
                    the setup.
                  </li>
                </ol>
                {isEnrolling && (
                  <div className="w-full h-[300px] grid place-items-center">
                    <Spinner size={16} colorClass="border-blue-700" />
                  </div>
                )}

                {!isEnrolling && serverError && (
                  <p className="text-red-500 text-sm mt-2">{serverError}</p>
                )}

                {!isEnrolling && totp && (
                  <>
                    <div className="w-[300px] h-[300px] relative mx-auto rounded my-2">
                      <Image src={totp.qr_code} alt={totp.uri} layout="fill" />
                    </div>
                    <div>
                      <label htmlFor="code">Authentication Code</label>
                      <Input {...register("code")} />
                      {errors.code && (
                        <p className="text-red-500 text-sm mt-1">
                          {errors.code.message}
                        </p>
                      )}
                    </div>
                  </>
                )}
              </div>
            </AlertDialog.Description>
            <div className="flex gap-4 justify-end mt-4">
              <AlertDialog.Cancel asChild>
                <EditDialogCancel />
              </AlertDialog.Cancel>
              {!isEnrolling && totp && (
                <EditDialogSubmit value="Confirm" loading={isVerifying} />
              )}
            </div>
          </form>
        </AlertDialog.Content>
      </AlertDialog.Portal>
    </AlertDialog.Root>
  );
}

// -----------------------------------------
// |   Disable Two-Factor Authentication   |
// -----------------------------------------

function DisableTwoFactorAction() {
  const [isOpen, setIsOpen] = useState(false);
  const [isUnenrolling, startUnenrolling] = useTransition();
  const [serverError, setServerError] = useState<string | null>(null);

  const onSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    startUnenrolling(async () => {
      const res = await unenrollTwoFactor();
      if (res.success) {
        setIsOpen(false);
        setServerError(null);

        // log out
        await fetch("/api/auth/logout", {
          method: "POST"
        });
        const supabase = createClient();
        await supabase.auth.signOut();
        window.location.href = "/";
      } else {
        setServerError(
          res.error || "Failed to disable two-factor authentication"
        );
      }
    });
  };

  return (
    <AlertDialog.Root open={isOpen} onOpenChange={setIsOpen}>
      <AlertDialog.Trigger asChild>
        <button className="text-red-700 hover:bg-red-50 rounded px-2">
          Disable
        </button>
      </AlertDialog.Trigger>
      <AlertDialog.Portal>
        <AlertDialog.Overlay className="bg-opacity-50 bg-gray-950 fixed inset-0 z-50" />
        <AlertDialog.Content className="fixed z-50 overflow-y-auto inset-0 grid place-items-center">
          <form
            className="my-16 w-[90vw] max-w-md bg-white p-6 rounded-lg shadow-lg"
            onSubmit={onSubmit}
          >
            <AlertDialog.Title className="text-lg font-semibold text-center mb-4">
              Disable Two-Factor Authentication
            </AlertDialog.Title>
            <AlertDialog.Description asChild>
              <p className="text-gray-700 mb-4">
                Are you sure you want to disable two-factor authentication? This
                will remove the extra layer of security from your account and
                log you out.
              </p>
            </AlertDialog.Description>
            {serverError && (
              <p className="text-red-500 text-sm mt-2">{serverError}</p>
            )}
            <div className="flex gap-4 justify-end mt-4">
              <AlertDialog.Cancel asChild>
                <EditDialogCancel />
              </AlertDialog.Cancel>
              <EditDialogSubmit
                className="bg-red-600 hover:bg-red-700"
                value="Confirm"
                loading={isUnenrolling}
              />
            </div>
          </form>
        </AlertDialog.Content>
      </AlertDialog.Portal>
    </AlertDialog.Root>
  );
}
